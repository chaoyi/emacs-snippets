# -*- mode: snippet -*-
# name: go
# key: go
# --
#include <algorithm>
#include <array>
#include <cassert>
#include <chrono>
#include <cinttypes>
#include <cmath>
#include <cstddef>
#include <cstring>
#include <functional>
#include <iomanip>
#include <iostream>
#include <map>
#include <numeric>
#include <queue>
#include <random>
#include <set>
#include <tuple>
#include <unordered_map>
#include <unordered_set>
#include <vector>
using namespace std;

// http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0200r0.html
template <class Fun> class y_combinator_result {
  Fun fun_;

public:
  template <class T>
  explicit y_combinator_result(T &&fun) : fun_(std::forward<T>(fun)) {}
  template <class... Args> decltype(auto) operator()(Args &&...args) {
    return fun_(std::ref(*this), std::forward<Args>(args)...);
  }
};
template <class Fun> decltype(auto) y_combinator(Fun &&fun) {
  return y_combinator_result<std::decay_t<Fun>>(std::forward<Fun>(fun));
}

template <typename A, typename B>
ostream &operator<<(ostream &os, const pair<A, B> &p) {
  return os << '(' << p.first << ", " << p.second << ')';
}
template <typename T_container, typename T = typename enable_if<
                                    !is_same<T_container, string>::value,
                                    typename T_container::value_type>::type>
ostream &operator<<(ostream &os, const T_container &v) {
  os << '{';
  string sep;
  for (const T &x : v)
    os << sep << x, sep = ", ";
  return os << '}';
}

void dbg_out() { cerr << endl; }
template <typename Head, typename... Tail> void dbg_out(Head H, Tail... T) {
  cerr << ' ' << H;
  dbg_out(T...);
}
#ifdef NEAL_DEBUG
#define dbg(...) cerr << "(" << #__VA_ARGS__ << "):", dbg_out(__VA_ARGS__)
#else
#define dbg(...)
#endif

class hash_tuple {
  template <class T> struct component {
    const T &value;
    component(const T &value) : value(value) {}
    uintmax_t operator,(uintmax_t n) const {
      n ^= hash<T>()(value);
      n ^= n << (sizeof(uintmax_t) * 4 - 1);
      return n ^ hash<uintmax_t>()(n);
    }
  };

public:
  template <class Tuple> size_t operator()(const Tuple &tuple) const {
    return hash<uintmax_t>()(apply(
        [](const auto &...xs) { return (component(xs), ..., 0); }, tuple));
  }
};

void run_case(int test_case) {
  $0
}

int main() {
  int tests;
  cin >> tests;

  for (int tc = 1; tc <= tests; tc++) {
    run_case(tc);
    cout << flush;
  }
}
